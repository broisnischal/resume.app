generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  name       String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  username   String       @unique
  usertype   UserType     @default(FREE)
  image      UserImage?
  roles      Role[]
  sessions   Session[]
  resume     Resume[]
  password   Password?
  connection Connection[]
}

model Resume {
  id              String            @id @default(cuid())
  title           String
  content         String?           @db.LongText
  ownerId         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  description     String?           @db.LongText
  designation     String?
  name            String?
  public          Boolean           @default(true)
  template        Boolean           @default(false)
  label           String            @unique
  owner           User              @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeUserImage ResumeUserImage[]
  socials         Socials[]
  skills          Skills[]
  works           Works[]

  @@index([ownerId])
}

model Works {
  id        String   @id @default(cuid())
  title     String
  company   String
  desc      String
  startDate DateTime
  endDate   DateTime
  resumeId  String?
  Resume    Resume?  @relation(fields: [resumeId], references: [id])

  @@index([resumeId])
}

model Skills {
  id       String  @id @default(cuid())
  name     String
  value    Int
  resumeId String?
  Resume   Resume? @relation(fields: [resumeId], references: [id])

  @@index([resumeId])
}

model Socials {
  id       String  @id @default(cuid())
  name     String
  url      String
  resumeId String?
  Resume   Resume? @relation(fields: [resumeId], references: [id])

  @@index([resumeId])
}

model ResumeUserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([resumeId])
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[]
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([providerName, providerId])
  @@index([userId])
}

model PermissionToRole {
  A String
  B String

  @@unique([A, B], map: "_PermissionToRole_AB_unique")
  @@index([B], map: "_PermissionToRole_B_index")
  @@map("_PermissionToRole")
}

model RoleToUser {
  A String
  B String

  @@unique([A, B], map: "_RoleToUser_AB_unique")
  @@index([B], map: "_RoleToUser_B_index")
  @@map("_RoleToUser")
}

enum UserType {
  FREE
  PRO
}
